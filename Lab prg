abstract class Employee{
    String name;         
    int empId;
    double basicSalary;
    Employee(String name,int empId,double basicSalary)
    {
        this.name = name;
        this.empId = empId;
        this.basicSalary = basicSalary;
    }
    abstract double calculateSalary();
    void displaySalary(){
        System.out.println("Employee Name : "+name);
        System.out.println("Employee ID: "+empId);
        System.out.println("Salary : "+calculateSalary());
    }
}
class FulltimeEmployee extends Employee{
    public FulltimeEmployee(String name,int empId,double basicSalary){
    super(name,empId,basicSalary);
}
@Override
public double calculateSalary(){
    return basicSalary+(0.2 * basicSalary);
}
}
class PartTimeEmployee extends Employee{
    double hourlyrate;
    int hoursWorked;
    public PartTimeEmployee(String name,int empId,double basicSalary,double hourlyrate,int hoursWorked){
        super (name,empId,basicSalary);
        this.hourlyrate = hourlyrate;
        this.hoursWorked = hoursWorked;
    }
    @Override
    double calculateSalary(){
        return basicSalary+(hourlyrate*hoursWorked);
    }
} 
public class EmployeeTest{
    public static void main(String[] args){
        Employee fulltime = new FulltimeEmployee("Naveen",101,20000);
        Employee parttime = new PartTimeEmployee("Mohan",99,2000,50,20);
        fulltime.displaySalary();
        System.out.println();
        parttime.displaySalary();
    }
}
------------------------------------------------------------------------------------------------------------------
abstract class bankAccount {
    String accountNumber;
    String holderName;
    double balance;
    public bankAccount(String accountNumber, String holderName, double balance) {
        this.accountNumber = accountNumber;
        this.holderName = holderName;
        this.balance = balance;
    }
    abstract double calculateInterest();
    void deposit(double amount) {
        balance += amount;
        System.out.println("Deposited: " + amount + " New balance: " + balance);
    }
        void withdraw(double amount) {
        if (amount > 0 && amount <= balance) {
            balance -= amount;
            System.out.println("Withdrawn: " + amount + " New balance: " + balance);
        } else {
            System.out.println("Insufficient balance");
        }
    }
    public void displayAccountDetails() {
        System.out.println("---------------------------------");
        System.out.println("Account Number: " + accountNumber);
        System.out.println("Holder Name: " + holderName);
        System.out.println("Balance: $" + balance);
        System.out.println("Interest Earned: $" + calculateInterest());
    }
}
class savingsAccount extends bankAccount {
    savingsAccount(String accountNumber, String holderName, double balance) {
        super(accountNumber, holderName, balance);
    }

    @Override
    double calculateInterest() {
        return balance * 0.04; 
    }
}
class currentAccount extends bankAccount {
    currentAccount(String accountNumber, String holderName, double balance) {
        super(accountNumber, holderName, balance);
    }
    @Override
    double calculateInterest() {
        return balance * 0.02;
    }
}

public class BankSystem {
    public static void main(String[] args) {
        bankAccount savings = new savingsAccount("Nav007", "Naveen", 20000);
        bankAccount current = new currentAccount("Moh08", "Mohan", 10000);
        System.out.println("Savings Account Interest: $" + savings.calculateInterest());
        savings.withdraw(20006);
        System.out.println();
        System.out.println("Current Account Interest: $" + current.calculateInterest());
        current.deposit(5000);
        current.withdraw(2000);
        savings.displayAccountDetails();
        current.displayAccountDetails();
    }
}
-----------------------------------------------------------------------------------------------------
abstract class Vehicle {
    String vehicleName;
    String brand;
    double dailyRate;

    Vehicle(String vehicleName, String brand, double dailyRate) {
        this.vehicleName = vehicleName;
        this.brand = brand;
        this.dailyRate = dailyRate;
    }

    abstract double calculateRent(int days);

    void displayRent(int days) {
        System.out.println("Vehicle Name: " + vehicleName);
        System.out.println("Daily Rate: " + dailyRate);
        System.out.println("Days: " + days);
        System.out.println("Total Rent: " + calculateRent(days));
    }
}

class Car extends Vehicle {
    Car(String vehicleName, String brand, double dailyRate) {
        super(vehicleName, brand, dailyRate);
    }

    @Override
    double calculateRent(int days) {
        return dailyRate * days;
    }
}

class Bike extends Vehicle {
    Bike(String vehicleName, String brand, double dailyRate) {
        super(vehicleName, brand, dailyRate);
    }

    @Override
    double calculateRent(int days) {
        double total = dailyRate * days;
        double discount = total * 0.1;
        return total - discount;
    }
}

public class VehicleRentalSystem {
    public static void main(String[] args) {
        Vehicle car = new Car("Super Car", "BMW", 10000);
        Vehicle bike = new Bike("Super Bike", "NINJA H2R", 5000000);

        System.out.println("CAR Rental");
        car.displayRent(55);

        System.out.println("\nBIKE Rental");
        bike.displayRent(55);
    }
}
-----------------------------------------------------------------------------------
