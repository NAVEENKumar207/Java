import java.util.*;
abstract class Employee{
    String name;
    int empId;
    double basicSalary;
    Employee(String name,int empId,double basicSalary){
        this.name = name;
        this.empId = empId;
        this.basicSalary = basicSalary;
    }
    abstract double calculateSalary();
    public void displayInfo(){
        System.out.println("Employee Name "+ name);
        System.out.println("Employee ID "+ empId);
        System.out.println("Salary " + calculateSalary());
    }
}

class FullTimeEmployee extends Employee{
    FullTimeEmployee(String name,int empId,double basicSalary){
        super(name,empId,basicSalary);
    }
    @Override
    double calculateSalary(){
        return basicSalary+(0.2*basicSalary);
    }
}

class PartTimeEmployee extends Employee{
    double hourlyRate;
    int hoursWorked;
    PartTimeEmployee(String name,int empId,double basicSalary,double hourlyRate,int hoursWorked){
        super(name,empId,basicSalary);
        this.hourlyRate = hourlyRate;
        this.hoursWorked = hoursWorked;
    }
    @Override
    double calculateSalary(){
        return basicSalary+(hourlyRate*hoursWorked);
    }
}
public class EmployeesTest {
    public static void main(String[] args){
        Scanner sc = new Scanner(System.in);
        System.out.println();
        System.out.println("Enter Full Time Employee's Name ,Employee ID,Basic Salary");
        String name = sc.nextLine();
        int empId = sc.nextInt();
        double basicSalary = sc.nextDouble();
        FullTimeEmployee f = new FullTimeEmployee(name, empId, basicSalary);
        f.displayInfo();

        System.out.println();

        System.out.println("Enter Part Time Employee's Name,Employee ID,Basic Salary,Hourly Rate,Hours Worked");
        name = sc.next();
        empId = sc.nextInt();
        basicSalary = sc.nextDouble();
        double hourlyRate = sc.nextDouble();
        int hoursWorked = sc.nextInt();
        PartTimeEmployee p = new PartTimeEmployee(name,empId,basicSalary,hourlyRate,hoursWorked);
        p.displayInfo();

        sc.close();
    }
}

------------------------------------------------------------------------------------------------------------------
import java.util.Scanner;

abstract class bankAccount {
    String accountNumber;
    String holder;
    double balance;

    bankAccount(String accountNumber, String holder, double balance) {
        this.accountNumber = accountNumber;
        this.holder = holder;
        this.balance = balance;
    }

    abstract double calculateIntrest();

    public void deposit(double amount) {
        balance += amount;
        System.out.println("Deposited Amount to Your Account, new balance: " + balance);
    }

    public void withdraw(double amount) {
        if (amount <= balance) {
            balance -= amount;
            System.out.println("Withdrawn Amount from Your Account, new balance: " + balance);
        } else {
            System.out.println("Insufficient Balance");
        }
    }

    public void displayInfo() {
        System.out.println("Account Number: " + accountNumber);
        System.out.println("Holder: " + holder);
        System.out.println("Balance: " + balance);
    }
}

class savingsAccount extends bankAccount {
    public savingsAccount(String accountNumber, String holder, double balance) {
        super(accountNumber, holder, balance);
    }

    @Override
    double calculateIntrest() {
        return balance * 0.02;
    }
}

class currentAccount extends bankAccount {
    public currentAccount(String accountNumber, String holder, double balance) {
        super(accountNumber, holder, balance);
    }

    @Override
    double calculateIntrest() {
        return balance * 0.02;
    }
}

public class BankingSystem {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        
        System.out.println("Enter the Savings Account number, Holder name, and their balance:");
        String accountNumber = sc.nextLine();  
        String holder = sc.nextLine();     
        double balance = sc.nextDouble();    
        sc.nextLine();
        
        savingsAccount s = new savingsAccount(accountNumber, holder, balance);
        s.displayInfo();
        System.out.println("Savings Account Interest: " + s.calculateIntrest());
        System.out.println("Enter the Withdraw Amount for Savings Account:");
        double withdrawAmount = sc.nextDouble();
        s.withdraw(withdrawAmount);
        System.out.println();
        sc.nextLine();  
        System.out.println("Enter the Current Account number, Holder name, and their balance:");
        accountNumber = sc.nextLine();  
        holder = sc.nextLine();
        balance = sc.nextDouble();
        sc.nextLine();  
        
        currentAccount c = new currentAccount(accountNumber, holder, balance);
        c.displayInfo();
        System.out.println("Current Account Interest: " + c.calculateIntrest());
        System.out.println("Enter the Deposit Amount for Current Account:");
        double depositAmount = sc.nextDouble();
        c.deposit(depositAmount);
        System.out.println("Enter the Withdraw Amount for Current Account:");
        double withdrawAmountC = sc.nextDouble();
        c.withdraw(withdrawAmountC);
        System.out.println();

        sc.close();
    }
}
-----------------------------------------------------------------------------------------------------
abstract class Vehicle {
    String vehicleName;
    String brand;
    double dailyRate;

    Vehicle(String vehicleName, String brand, double dailyRate) {
        this.vehicleName = vehicleName;
        this.brand = brand;
        this.dailyRate = dailyRate;
    }

    abstract double calculateRent(int days);

    void displayRent(int days) {
        System.out.println("Vehicle Name: " + vehicleName);
        System.out.println("Daily Rate: " + dailyRate);
        System.out.println("Days: " + days);
        System.out.println("Total Rent: " + calculateRent(days));
    }
}

class Car extends Vehicle {
    Car(String vehicleName, String brand, double dailyRate) {
        super(vehicleName, brand, dailyRate);
    }

    @Override
    double calculateRent(int days) {
        return dailyRate * days;
    }
}

class Bike extends Vehicle {
    Bike(String vehicleName, String brand, double dailyRate) {
        super(vehicleName, brand, dailyRate);
    }

    @Override
    double calculateRent(int days) {
        double total = dailyRate * days;
        double discount = total * 0.1;
        return total - discount;
    }
}

public class VehicleRentalSystem {
    public static void main(String[] args) {
        Vehicle car = new Car("Super Car", "BMW", 10000);
        Vehicle bike = new Bike("Super Bike", "NINJA H2R", 5000000);

        System.out.println("CAR Rental");
        car.displayRent(55);

        System.out.println("\nBIKE Rental");
        bike.displayRent(55);
    }
}
-----------------------------------------------------------------------------------
abstract class Product {
    String productId;
    String name;
    double price;

    public Product(String productId, String name, double price) {
        this.productId = productId;
        this.name = name;
        this.price = price;
    }

    abstract double calculateDiscountedPrice();

    public void displayProductDetails() {
        System.out.println("--------------------------------------");
        System.out.println("Product ID: " + productId);
        System.out.println("Name: " + name);
        System.out.println("Original Price: $" + price);
        System.out.println("Discounted Price: $" + calculateDiscountedPrice());
    }
}

class Electronics extends Product {
    public Electronics(String productId, String name, double price) {
        super(productId, name, price);
    }

    @Override
    double calculateDiscountedPrice() {
        return price - (price * 0.10);
    }
}

class Clothing extends Product {
    public Clothing(String productId, String name, double price) {
        super(productId, name, price);
    }

    @Override
    double calculateDiscountedPrice() {
        return price - (price * 0.15);
    }
}

public class OnlineShoppingSystem {
    public static void main(String[] args) {
        Product laptop = new Electronics("ELE55", "PC", 100000);
        Product tshirt = new Clothing("CLO66", "Denim Shirt", 1000);
        laptop.displayProductDetails();
        tshirt.displayProductDetails();
    }
}
---------------------------------------------------------------------------------------
abstract class Exam {
    String examId;
    String subject;
    double totalMarks;

    public Exam(String examId, String subject, double totalMarks) {
        this.examId = examId;
        this.subject = subject;
        this.totalMarks = totalMarks;
    }
    abstract boolean evaluateResult();
    public void displayResult() {
        System.out.println("Exam ID: " + examId);
        System.out.println("Subject: " + subject);
        System.out.println("Total Marks: " + totalMarks);
        System.out.println("Result: " + (evaluateResult() ? "Pass" : "Fail"));
        System.out.println("-----------------------------");
    }
}

class TheoryExam extends Exam {
    public TheoryExam(String examId, String subject, double totalMarks) {
        super(examId, subject, totalMarks);
    }
    
    @Override
    boolean evaluateResult() {
        return totalMarks >= 40;
    }
}

class PracticalExam extends Exam {
    public PracticalExam(String examId, String subject, double totalMarks) {
        super(examId, subject, totalMarks);
    }
    @Override
    boolean evaluateResult() {
        return totalMarks >= 50;
    }
}
public class UniversityExamSystem {
    public static void main(String[] args) {
        Exam theoryExam1 = new TheoryExam("T101", "Mathematics", 45);
        Exam theoryExam2 = new TheoryExam("T102", "Physics", 35);
        Exam practicalExam1 = new PracticalExam("P201", "Computer Science Lab", 55);
        Exam practicalExam2 = new PracticalExam("P202", "Chemistry Lab", 45);
        theoryExam1.displayResult();
        theoryExam2.displayResult();
        practicalExam1.displayResult();
        practicalExam2.displayResult();
    }
}
